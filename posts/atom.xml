<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on NetJagaimo&#39;s Blog</title>
    <link>http://netjagaimo.github.io/posts/</link>
    <description>Recent content in Posts on NetJagaimo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Apr 2020 16:31:54 +0800</lastBuildDate>
    
	<atom:link href="http://netjagaimo.github.io/posts/atom.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSS固定頁尾 - 使用flexbox的解法</title>
      <link>http://netjagaimo.github.io/2020-04-19-sticky-footer/</link>
      <pubDate>Sun, 19 Apr 2020 16:31:54 +0800</pubDate>
      
      <guid>http://netjagaimo.github.io/2020-04-19-sticky-footer/</guid>
      <description>&lt;p&gt;在寫網頁的時後有一個常常會碰到的問題，那就是當網頁內容少於網瀏覽器高度的時候，footer就不會固定在下方，而是隨著內容一起浮上來，像這張圖一樣
&lt;img src=&#34;http://netjagaimo.github.io/images/2020-04-19-sticky-footer/footer-bug-demo.PNG&#34; alt=&#34;&#34;&gt;
解決的方法有很多種，但大多都有些複雜，而這篇文章分享的是一個利用flexbox的解法，很單純且彈性很高，一起看下去吧!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python String Interning機制</title>
      <link>http://netjagaimo.github.io/2020-03-10-python-string-interning/</link>
      <pubDate>Tue, 10 Mar 2020 10:51:05 +0800</pubDate>
      
      <guid>http://netjagaimo.github.io/2020-03-10-python-string-interning/</guid>
      <description>&lt;p&gt;某天在玩弄python的時候(迷:住手!放開那個python!!)發現了一個有趣的現象:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; id(a)
&lt;span style=&#34;color:#ae81ff&#34;&gt;2917193150576&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; id(b)
&lt;span style=&#34;color:#ae81ff&#34;&gt;2917193150576&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; id(a)
&lt;span style=&#34;color:#ae81ff&#34;&gt;2917193150576&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; id(b)
&lt;span style=&#34;color:#ae81ff&#34;&gt;2917193150640&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第一個例子，兩個變數指向同一個字串，然後記憶體位置一樣。&lt;br&gt;
但是，當我們加入了空格，兩個變數都指向&amp;quot;hello world&amp;quot;時，記憶體位置卻不一樣了。&lt;br&gt;
咦?? 為什麼會這樣?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python編譯與直譯探討</title>
      <link>http://netjagaimo.github.io/2020-03-10-python-interpreter-vs-compile/</link>
      <pubDate>Tue, 10 Mar 2020 10:40:44 +0800</pubDate>
      
      <guid>http://netjagaimo.github.io/2020-03-10-python-interpreter-vs-compile/</guid>
      <description>&lt;h1 id=&#34;python編譯與直譯探討&#34;&gt;Python編譯與直譯探討&lt;/h1&gt;
&lt;p&gt;記得大一上計算機概論的時候，老師說過程式語言分成編譯式程式語言，以及直譯式程式語言，所謂直譯式程式語言就是一行一行這樣讀一行執行一行的程式語言。當時我就很納悶，阿程式語言不都是一行一行從上到下執行下去的嗎? 所以直譯式到底是在做什麼。&lt;/p&gt;
&lt;p&gt;大三開始學python時，老師也提到說python是直譯式語言，又一次聽到這個不知所云的詞以及那不知所云的解釋，當下決心要好好的了解，於是就去請教了老師，結果居然得到了「google上面有很多資料可以看」的這種答覆，當下心理OS外加草尼瑪奔騰「啊我就是看了不懂才問你啊&amp;hellip;，叫我自己查，那要你何用(?」，一怒之下決心要把這件事給搞懂，於是就有了這篇文章。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript OOP</title>
      <link>http://netjagaimo.github.io/2019-10-23-javascript-oop/</link>
      <pubDate>Wed, 23 Oct 2019 12:20:00 +0800</pubDate>
      
      <guid>http://netjagaimo.github.io/2019-10-23-javascript-oop/</guid>
      <description>&lt;div class=&#34;notices note&#34; &gt;&lt;p&gt;參考章節: &lt;a href=&#34;http://eloquentjavascript.net/06_object.html&#34;&gt;Ch6 The Secret Life Of Objects&lt;/a&gt;&lt;br&gt;
Slides: &lt;a href=&#34;https://slides.com/sirla_potato/javascript-oop&#34;&gt;https://slides.com/sirla_potato/javascript-oop&lt;/a&gt;&lt;br&gt;
環境: Windows10、Node.js(10.15.3)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ZkaDEH2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;oop介紹&#34;&gt;OOP介紹&lt;/h2&gt;
&lt;h3 id=&#34;簡介&#34;&gt;簡介&lt;/h3&gt;
&lt;p&gt;OOP = Object Oriented Programming (物件導向程式設計)&lt;/p&gt;
&lt;p&gt;將功能抽象化後，用程式表達出來的一種程式設計的方式，例如上面的圖，將兔子轉變為抽象化的描述方式&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>